# This is a basic workflow to help you get started with Actions

name: kernelsu_for_redbull_with_aosp
# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  # push:
  #   branches: [ "main" ]
  # pull_request:
  #   branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      release:
        description: "Release"
        required: true
        default: false
        type: boolean

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: self-hosted

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      # Free Disk Space
      # - name: Free Disk Space (Ubuntu)
      #   uses: jlumbroso/free-disk-space@main
      #   with:
      #     # this might remove tools that are actually needed,
      #     # if set to "true" but frees about 6 GB
      #     tool-cache: ture

      #     # all of these default to true, but feel free to set to
      #     # "false" if necessary for your workflow
      #     android: false
      #     dotnet: true
      #     haskell: true
      #     large-packages: true
      #     docker-images: true
      #     swap-storage: true

      # Runs a single command using the runners shell
      - name: Preparing
        run: |
          mkdir -p ~/runner
          cd ~/runner
          echo 'Preparing packages'
          sudo apt-get update -y
          sudo apt-get install -y curl git
          # echo 'cloning itself'
          # git clone https://github.com/Songkunda/kernelsu_pixel5


          if [ ! -d ~/runner/bin/repo ]; then
            # repo
            mkdir -p ~/runner/bin
            # PATH=~/runner/bin:$PATH
            curl https://storage.googleapis.com/git-repo-downloads/repo > ~/runner/bin/repo
            chmod a+x ~/runner/bin/repo
          fi

          mkdir -p android-kernel && cd android-kernel
          echo 'pulling kernel source'
          # tag android-13.0.0_r0.122
          ~/runner/bin/repo init -u https://android.googlesource.com/kernel/manifest -b android-msm-redbull-4.19-android13-qpr3
          ~/runner/bin/repo sync

      - name: Setup KernelSU to Kernel
        if: success()
        run: |
          cd ~/runner/android-kernel/private/msm-google
          curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash -s v0.9.5

      - name: Build Kernel
        if: success()
        run: |
          cd ~/runner/android-kernel
          ./build_redbull.sh
          # ./build_redbull-gki.sh

      - name: Zip kernel
        if: success()
        run: |
          cd ~/runner/android-kernel/out/android-msm-pixel-4.19/dist
            find . -maxdepth 1 -type f \( -name "Image*" -o -name "boot*" -o -name "*.ko" -o -name "*.gz" \) -exec zip -v redfin-kernel.zip {} +

      - name: Prepare AOSP
        if: success()
        run: |
          cd ~/runner
          mkdir -p aosp && cd aosp
          echo 'pulling aosp source'
          ~/runner/bin/repo init -u https://android.googlesource.com/platform/manifest -b android-13.0.0_r75
          ~/runner/bin/repo sync

      - name: prepare aosp driver
        if: success()
        run: |
          cd ~/runner/aosp
          DOWNLOAD_URL="https://dl.google.com/dl/android"
          echo 'pulling aosp drivers'
          if [ ! -d ~/runner/aosp/extract-google_devices-redfin.sh ]; then
            echo 'pulling aosp google drivers'
            curl --output - $DOWNLOAD_URL/aosp/google_devices-redfin-tq3a.230901.001-1c6ad221.tgz | tar -xzvf -
            tail -n +315 extract-google_devices-redfin.sh | tar -zxvf -
          fi
          if [ ! -d ~/runner/aosp/extract-qcom-redfin.sh ]; then
            echo 'pulling aosp qcom drivers'
            curl --output - $DOWNLOAD_URL/aosp/qcom-redfin-tq3a.230901.001-e5b12b12.tgz | tar -xzvf -
            tail -n +315 extract-qcom-redfin.sh | tar -zxvf -
          fi
      - name: copy kernel to AOSP
        if: success()
        run: |
          cd ~/runner/android-kernel/out/android-msm-pixel-4.19/dist
          cp -v ~/runner/android-kernel/out/android-msm-pixel-4.19/dist/* ~/runner/aosp/device/google/redbull-kernel/

      - name: Build AOSP
        if: success()
        run: |
          cd ~/runner/aosp
          echo 'building AOSP'
          source build/envsetup.sh
          lunch aosp_redfin-userdebug
          echo "nproc: $(nproc --all) -> run make -j8"
          make -j8

      - name: zip AOSP
        if: success()
        run: |

          cd ~/runner/aosp/out/target/product/redfin/
          echo "export ANDROID_PRODUCT_OUT=\$(pwd)" > flashall.sh
          echo "fastboot flashall -w" >> flashall.sh
          echo "-------打包文件记录-------"
          ls android-info.txt
          ls *.img
          echo "---------------------------"
          zip -r redfin-rom.zip *.txt *.img *.json flashall.sh

      - name: Upload kernel
        if: success()
        uses: actions/upload-artifact@v3
        with:
          name: Redfin-kernel.zip
          path: "~/runner/android-kernel/out/android-msm-pixel-4.19/dist/redfin-kernel.zip"

      - name: Upload AOSP
        if: success()
        uses: actions/upload-artifact@v3
        with:
          name: Redfin-ROM.zip
          path: "~/runner/aosp/out/target/product/redfin/redfin-rom.zip"
